Методы @Repository
https://alexkosarev.name/2017/02/09/spring-data-jpa-magic-methods/

Удалить файл из индекса, оставив его при этом в рабочем каталоге
$ git rm --cached readme.txt
Удалить файл для каждого коммита в истории ветки (если он присутствует)
$ git filter-branch --index-filter "git rm --cached --ignore-unmatch path/to/file" --prune-empty HEAD



*** Пагинация ***

Page - содержит результаты выполнения запроса (коллекцию значений) и служебные данные для постраничности.
Pageable - параметр для настроек постраничности (сколько элементов, сортировка и прочее).


*** Слои приложения ***

Слой DAO - абстрактный слой по работе с бизнес-процессами. Определяет какое поведение будет у каждого типа
объектов и что с ними можно будет делать. Данный класс является общим предком для всех DAO-классов.

Слой Service - реализует DAO-интерфейсы с момощью Repository и предоставляет удобное API. Репозитории можно
использовать напрямую, без сервисов, но у них может быть недостаточно удобный API.

@Repository не должен содержать никакой бизнес-логики, он должен использоваться только для получения данных
из БД. @Component - это обычный Spring-бин, он не должен работать с БД или содержать бизнес-логику.
@Service должен содержать бизнес-логику, реализовывать DAO-классы, но не должен напрямую обращаться к БД.
Spring различает эти бины и по разному ведет себя с ними. Например, если это @Repository, то он знает, что
будет обращение к БД и считывает дополнительные аннотации (например, по транзакциям).

Spring-контейнер - это объект, который управляет другими встроенными объектами (в том числе другими контейнерами).
Управляет жизненным циклом, обменом данных и прочим.
Также контейнеры умеют "объщаться" с другими внешними контейнерами (в нашем случае с JSF web-контейнером) для
правильной интеграции
Spring создает различные контейнеры, у каждого свои цели и задачи.

Если добавляется какой-то новый функционал, то он должен появиться на всех уровнях: DAO, Repository и Service.


